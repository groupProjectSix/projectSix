{"version":3,"sources":["assets/logo.svg","firebase.js","QueryWord.js","Main.js","SavedBackronym.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","QueryWord","handleFirebaseSubmit","database","ref","push","entireWord","props","userInputProp","words","state","finalWord","generateRandomNumber","array","Math","floor","random","length","callToApiFirst","userWord","firstLetter","axios","url","method","params","ml","sp","md","then","data","setState","thatsNotAWord","arrayOfLetterObject","firstWordArray","randomWordNumber","firstWord","word","arrayForFirstWord","firstSelectedWord","a","async","lastLetter","i","spreadLettersProp","newWords","callToApiSecond","randomWordApiCall","handleApiData","nextLetter","prevWord","isItWordFinal","Promise","resolve","reject","lc","newWordArray","map","wordObject","ongoingWordArray","restOfWordsArray","isItANoun","actualStringToPush","fillerWord","randomFillerWord","wordToPush","finalWordArray","filter","tags","searchAgain","lettersToQuery","displayedWords","this","className","to","Fragment","index","key","onClick","Component","Main","preventDefaultFunction","event","preventDefault","lettersToBeSpreadProp","saveUserInput","console","log","target","eventHappening","value","showErrorMessage","QueryWordResultsProp","displayError","displayErrorMessage","htmlFor","type","placeholder","id","maxLength","onChange","tabIndex","SavedBackronym","pullFirebase","on","snapshot","val","backronymsToBe","savedBackronyms","wordsWithSpaces","replace","Footer","href","App","returnHome","userInput","showBackButton","spreadLetters","QueryWordResults","wordToQuery","lettersToBeSpread","showButton","src","logo","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33f4c082.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d65b87ef.svg\";","import firebase from 'firebase/app';\r\nimport 'firebase/database'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyADqSGWHdf9gZ0cyhUXRzFNUK25bY1bVJw\",\r\n  authDomain: \"projectsix-4cd1b.firebaseapp.com\",\r\n  databaseURL: \"https://projectsix-4cd1b.firebaseio.com\",\r\n  projectId: \"projectsix-4cd1b\",\r\n  storageBucket: \"projectsix-4cd1b.appspot.com\",\r\n  messagingSenderId: \"210565880710\",\r\n  appId: \"1:210565880710:web:273bfb9a63f26bb0056a07\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n//set up dbRef\r\n// const dbRef = firebase.database().ref();\r\n\r\nexport default firebase;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport firebase from \"./firebase\";\r\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\r\n\r\nclass QueryWord extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      lettersToQuery: [],\r\n      displayedWords: [],\r\n      firstWordArray: [],\r\n      firstSelectedWord: \"\",\r\n      restOfWordsArray: [],\r\n      finalWord: [],\r\n      thatsNotAWord: false,\r\n    };\r\n  }\r\n// sends the final word up to firebase, each individual word/object makes an array\r\n  handleFirebaseSubmit =() => { \r\n    const dbRef = firebase.database().ref(); \r\n  \r\n    dbRef.push({\r\n      entireWord:this.props.userInputProp,\r\n      words:this.state.finalWord + \"\",\r\n\r\n    });\r\n  }\r\n\r\n  generateRandomNumber = (array) => {\r\n    return(Math.floor(Math.random() * array.length))\r\n  }\r\n\r\n  callToApiFirst = (userWord, firstLetter) => {\r\n    axios({\r\n      url:`http://api.datamuse.com/words`, \r\n      method: \"get\", \r\n      params:{ \r\n        ml:`${userWord}`,\r\n        sp: `${firstLetter}*`,\r\n        md: \"p\"\r\n      }\r\n    }).then((data)=>{\r\n      if (data.data.length === 0) {\r\n        this.setState({\r\n          thatsNotAWord: true\r\n        })\r\n      } else {\r\n        const arrayOfLetterObject = data.data;\r\n        this.setState({\r\n          firstWordArray: arrayOfLetterObject,\r\n        })\r\n      }\r\n    }).then( () => {\r\n      if (this.state.thatsNotAWord === false) {\r\n        let randomWordNumber = this.generateRandomNumber(this.state.firstWordArray);\r\n        const firstWord = (this.state.firstWordArray[randomWordNumber].word);\r\n        const arrayForFirstWord = [];\r\n        arrayForFirstWord.push(firstWord)\r\n        this.setState({\r\n          firstSelectedWord: firstWord,\r\n          finalWord: arrayForFirstWord\r\n        });\r\n      }\r\n    }) //set an async function to await the result of each call before making the next\r\n    .then( async () => {\r\n      if (this.state.thatsNotAWord === false) {\r\n        let lastLetter = false;\r\n        //set up a loop to go through the remaining letters of user word\r\n        for (let i = 1; i <= this.props.spreadLettersProp.length - 1; i++) {\r\n          // check if we're on the last letter\r\n          if (i === this.props.spreadLettersProp.length - 1) {\r\n            lastLetter = true;\r\n          }\r\n          // setting a new variable to hold our api return PROMISE\r\n          const newWords = this.callToApiSecond(this.props.spreadLettersProp[i], this.state.finalWord[i]);\r\n          //wait for it....\r\n          await newWords.then((data) => {\r\n            // determine if we have a data return; I went for at least 2 for variety\r\n            if (data.data.length < 2) {\r\n              this.randomWordApiCall(this.props.spreadLettersProp[i], lastLetter);\r\n            } else { //otherwise pull a random response so we keep our word.\r\n              this.handleApiData(data, lastLetter);\r\n            }\r\n          })\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  callToApiSecond = (nextLetter, prevWord, isItWordFinal) => {\r\n    return new Promise((resolve, reject) => {\r\n      axios ({\r\n        url: `http://api.datamuse.com/words`,\r\n        method: \"get\",\r\n        params: {\r\n          lc: `${prevWord}`,\r\n          sp: `${nextLetter}*`,\r\n          md: \"p\"\r\n        }\r\n      }).then((data) => {\r\n        resolve(data);\r\n      })\r\n    })\r\n  }\r\n\r\n  randomWordApiCall = (nextLetter, isItWordFinal) => {\r\n    axios ({\r\n      url: `http://api.datamuse.com/words`,\r\n      method: \"get\",\r\n      params: {\r\n        sp: `${nextLetter}*`,\r\n        md: \"p\"\r\n      }\r\n    }).then((data) => {\r\n      this.handleApiData(data, isItWordFinal);\r\n    })\r\n  }\r\n\r\n  //function to check, filter, and work with API returns\r\n  handleApiData = (data, isItWordFinal) => {\r\n    const newWordArray = []; //empty array for our new word friends\r\n    data.data.map((wordObject) => {\r\n      newWordArray.push(wordObject)\r\n    })\r\n    //fill an array with info ALREADY in state, so everything pushes in order\r\n    const ongoingWordArray = [...this.state.restOfWordsArray];\r\n    ongoingWordArray.push(newWordArray)\r\n    //reset state to the array plus new value!\r\n    this.setState({\r\n      restOfWordsArray: ongoingWordArray\r\n    });\r\n    let finalWord = []; //this is our final word STRING\r\n    let isItANoun = false; //default to false; to be checked later\r\n    let actualStringToPush = \"\";\r\n    //some filler words to pretend anything in this crazy universe could make sense.\r\n    const fillerWord = [\"of\", \"and\"];\r\n    const randomFillerWord = this.generateRandomNumber(fillerWord); //self-explanatory?\r\n    //similar to above.\r\n    finalWord = [...this.state.finalWord];\r\n    const wordToPush = newWordArray[this.generateRandomNumber(newWordArray)]\r\n    if (isItWordFinal) { //check if it's word final letter to filter results FIRST\r\n      const finalWordArray = newWordArray.filter((word) => {\r\n        return word.tags; //not all words have metadata tags\r\n      }).filter((word) => {\r\n        return word.tags[0] === \"n\"; // get the \"nouns\", according to datamuse\r\n        //not to throw shade but \"AT\" IS NOT A NOUN\r\n      })\r\n      finalWord.push(finalWordArray[this.generateRandomNumber(finalWordArray)].word)\r\n    } else if (wordToPush.tags) {\r\n      for (let i = 0; i <= wordToPush.tags.length; i++) {\r\n        if (wordToPush.tags[i] === \"n\") {\r\n          isItANoun = true;\r\n        }\r\n      }\r\n      if (isItANoun) { // IS IT A NOUN, DATAMUSE?! IT MIGHT NOT BE\r\n        actualStringToPush = `${wordToPush.word} ${fillerWord[randomFillerWord]}`\r\n      } else {\r\n        actualStringToPush = `${wordToPush.word}`\r\n      }\r\n      finalWord.push(actualStringToPush)\r\n    }\r\n    this.setState({\r\n      finalWord: finalWord,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.callToApiFirst(this.props.userInputProp, this.props.spreadLettersProp[0]);\r\n  }\r\n\r\n  searchAgain = () => {\r\n  this.callToApiFirst(this.props.userInputProp, this.props.spreadLettersProp[0]);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.thatsNotAWord) {\r\n      return (\r\n        <section className=\"wordListContainer wrapper\">\r\n          <h3>I don't think that's a real word...</h3>\r\n          <button><Link to=\"/projectSix\">Try Again</Link></button>\r\n        </section>\r\n      )\r\n    } else {\r\n      if (this.state.finalWord.length === this.props.spreadLettersProp.length) {\r\n        return (\r\n          <React.Fragment>\r\n            <section className=\"wordListContainer wrapper\">\r\n            <h2>You searched the word:</h2>\r\n            <h3>{this.props.userInputProp}</h3>\r\n            <h2>Which <em>clearly</em> stands for:</h2>\r\n    \r\n            <ul className=\"wordChoicesList\">\r\n              {\r\n                this.state.finalWord.map( (word, index) => {\r\n                  return(\r\n                    <li key={index}>\r\n                      {word}\r\n                    </li>\r\n                  )\r\n                })\r\n              }\r\n              </ul>\r\n              <div className=\"queryWordsHandlingButton\">\r\n                <button className=\"tryAnotherButton\" onClick={this.searchAgain}>Try again</button>\r\n                  <Link className=\"submitWordLink\" onClick={this.handleFirebaseSubmit} to=\"/projectSix/SavedBackronym\">\r\n                    Submit your word\r\n                  </Link>\r\n              </div>\r\n            </section>\r\n          </React.Fragment>\r\n        )\r\n      } else {\r\n        return (\r\n          <section className=\"wordListContainer wrapper\">\r\n            <h3>Generating Backronym...</h3>\r\n          </section>\r\n        )\r\n      }\r\n    }\r\n  }\r\n}\r\nexport default QueryWord;\r\n\r\n// base url https://api.datamuse.com/words\r\n\r\n// params:\r\n// rel_bga:\r\n// sp:\r\n// rel_bga would be the word we want the call to relate TO\r\n// sp: is how we want the RESPONSE to be spelled like\r\n\r\n// const backronymsToBe = [];\r\n// const data = snapshot.val();\r\n\r\n// for (let key in data) {\r\n//   backronymsToBe.push(data[key]);\r\n// }\r\n\r\n// this.setState({\r\n//   savedBackronyms: backronymsToBe,\r\n// })","import React, {Component} from \"react\";\r\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\r\nimport QueryWord from \"./QueryWord\"\r\n\r\nclass Main extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            showErrorMessage: true,\r\n            displayError: false,\r\n        };\r\n    }\r\n\r\n    preventDefaultFunction = event => {\r\n        event.preventDefault();\r\n        this.props.lettersToBeSpreadProp();\r\n    }\r\n\r\n    saveUserInput = event => {\r\n        console.log(event.target);\r\n        const eventHappening = event.target.value;\r\n        this.setState({\r\n            showErrorMessage: false,\r\n        }, () => {\r\n            if (eventHappening.length >= 3 && eventHappening.length <= 6) {\r\n                this.props.QueryWordResultsProp(eventHappening);\r\n                this.setState({\r\n                    showErrorMessage: false,\r\n                    displayError: false,\r\n                })\r\n            } else if (eventHappening.length < 3) {\r\n                this.setState({\r\n                    showErrorMessage: true,\r\n                })\r\n                console.log(\"Enter at least 3 characters\");\r\n            };\r\n        });\r\n    }; \r\n\r\n    displayErrorMessage = () => {\r\n        this.setState({\r\n            displayError: true,\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <main className=\"wrapper homepage\">\r\n\r\n                    <div className=\"mainTextContainer\">\r\n                        <h1>You know what's more fun than acronyms?\r\n                            <span className=\"backronyms\">Backronyms.</span>\r\n                        </h1>\r\n                        <p>Enter any word below between three and six letters.<br/>\r\n                        We’ll work our magic and figure out what it stands for as an acronym.</p>\r\n                    </div>\r\n\r\n                    <form className=\"saveInput\">\r\n                        <span className=\"sr-only\"><label htmlFor=\"wordInput\">Enter a Word!</label></span>\r\n                            <input type=\"text\" placeholder=\"type here\" id=\"wordInput\" maxLength=\"6\" onChange={this.saveUserInput} />\r\n\r\n                            <button tabIndex=\"-1\" className=\"goButton\" onClick={this.preventDefaultFunction}>\r\n                            {this.state.showErrorMessage === true ? <span onClick={this.displayErrorMessage}>Go</span> : <Link to=\"/projectSix/search\">Go</Link>}\r\n                            </button>\r\n                            \r\n                        {this.state.displayError ? <span className=\"characterLengthError\">Please enter a word with at least three letters but no more than six.</span> : null}\r\n                    </form>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import React, { Component } from \"react\";\r\nimport firebase from \"./firebase\";\r\n\r\nclass SavedBackronym extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            savedBackronyms: [],\r\n        }\r\n    }\r\n    pullFirebase = () => {\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.on('value', snapshot => {\r\n            const data = snapshot.val();\r\n            const backronymsToBe = [];\r\n\r\n            for (let key in data) {\r\n                backronymsToBe.push(data[key]);\r\n            }\r\n            this.setState({\r\n                savedBackronyms: backronymsToBe,\r\n            })\r\n            // console.log(this.state.savedBackronyms[0].entireWord)\r\n        })\r\n\r\n        // this.state.savedBackronyms\r\n    }\r\n    \r\n        \r\n        // dbRef.on('value', snapshot => {\r\n        //     const data = snapshot.val();\r\n        //     console.log(data[0]);\r\n            // this.setState({\r\n            //     savedBackronyms: data,\r\n            // })\r\n            // console.log(this.state.savedBackronyms);\r\n            // const objectFromFirebase = this.state.savedBackronyms;\r\n            // for (let eachKey in objectFromFirebase) {\r\n                // const lastItem = objectFromFirebase[eachKey].length - 1;\r\n                // const lastItem = objectFromFirebase[eachKey].splice(-1, 1);\r\n                // const merged = lastItem.concat(objectFromFirebase[eachKey].splice(-1, 1)) \r\n                // console.log(lastItem)\r\n                // objectFromFirebase[eachKey][lastItem]\r\n                // const testArray = [];\r\n\r\n                // testArray.push(objectFromFirebase[eachKey][lastItem])\r\n                // this.setState({\r\n                //     baseWord: testArray,\r\n                // })\r\n                // console.log(testArray)\r\n                // console.log(objectFromFirebase[eachKey])\r\n            // }\r\n    //     }); \r\n        \r\n    // } \r\n\r\n\r\n    componentDidMount(){\r\n        this.pullFirebase();\r\n    }\r\n\r\n    render(){ \r\n        console.log(this.state.savedBackronyms)\r\n        return(\r\n            <React.Fragment>\r\n                <main className=\"wrapper\">\r\n                    <div className=\"hallOfLiteracyFameHeader\">\r\n                        <h2>Hall of Literacy Fame</h2>\r\n                    </div>\r\n                    <div className=\"resultsContainer\">\r\n                        {this.state.savedBackronyms.length !== 0 \r\n                        ? this.state.savedBackronyms.map( (value) => {\r\n                            console.log(value)\r\n                            const wordsWithCommas = value.words;\r\n                            const wordsWithSpaces = wordsWithCommas.replace(/[,]/g, \" \");\r\n                            console.log(wordsWithSpaces);\r\n                            return(\r\n                                <React.Fragment>\r\n                                    <div className=\"resultHeader\">\r\n                                        <h3>{value.entireWord}</h3>\r\n                                        <div className=\"wordsContainer\">\r\n                                            <p>{wordsWithSpaces}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                        : <h3>Waiting for data to load...</h3>}\r\n                    </div>\r\n                </main>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SavedBackronym;","import React,{Component} from \"react\" \r\nimport {Link} from \"react-router-dom\"\r\n\r\nclass Footer extends Component{\r\n    render(){\r\n        return(\r\n            <footer>\r\n                <p> © Backronym Generator 2019. Created By: </p>\r\n                <p>  \r\n                    <a target=\"_blank\" href={'http://sandy.codes'}>Sandy Pranjic</a>\r\n                    <a target=\"_blank\" href={'http://www.lynsey.codes'}>Lynsey O'Donnell</a>\r\n                    <a target=\"_blank\" href={'http://wadebutler.ca/'}>Wade Butler</a>\r\n                    <a target=\"_blank\" href={'http://www.bethancdavies.com'}>Bethan Davies</a>\r\n                </p>\r\n                \r\n                \r\n            </footer>\r\n        )\r\n    }\r\n} \r\nexport default Footer","import React, { Component } from \"react\";\r\n// import firebase from \"./firebase\";\r\nimport \"./App.scss\";\r\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\r\nimport Main from \"./Main\";\r\nimport QueryWord from \"./QueryWord\";\r\nimport logo from \"./assets/logo.svg\";\r\nimport SavedBackronym from \"./SavedBackronym\"; \r\nimport Footer from \"./Footer\"\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      userInput: \"\",\r\n      spreadLetters: [],\r\n    };\r\n  }\r\n\r\n  returnHome = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      userInput: \"\",\r\n    });\r\n    this.setState({\r\n      showBackButton: false,\r\n    });\r\n    this.setState({\r\n      spreadLetters: [],\r\n    });\r\n  }\r\n\r\n  QueryWordResults = (wordToQuery) => {\r\n    this.setState({\r\n      userInput: wordToQuery,\r\n    })\r\n  }\r\n\r\n  lettersToBeSpread = () => {\r\n    this.setState({\r\n      spreadLetters: [...this.state.userInput],\r\n    })\r\n  }\r\n\r\n  showButton= () => {\r\n    this.setState({\r\n      showBackButton: true,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <React.Fragment>\r\n          <header className=\"wrapper\">\r\n            <div className=\"logoContainer\">\r\n              <h1 className=\"sr-only\">Backronym Generator!</h1>\r\n              <img src={logo} />\r\n            </div>\r\n\r\n            <nav>\r\n              <ul>\r\n                <li>\r\n                  <div className=\"navLink\">\r\n                    <Link to=\"/projectSix\">\r\n                      Home\r\n                    </Link>\r\n                  </div>\r\n                </li>\r\n                <li>\r\n                  <div className=\"navLink\">\r\n                    <Link to=\"/projectSix/SavedBackronym\">\r\n                    Wall Of Literacy Fame\r\n                    </Link>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n\r\n          </header>\r\n          <Route exact path=\"/projectSix\" render={() => { return <Main lettersToBeSpreadProp={this.lettersToBeSpread} QueryWordResultsProp={this.QueryWordResults}/>}} />\r\n\r\n          <Route exact path=\"/projectSix/search\" render={() => { return <QueryWord userInputProp={this.state.userInput} spreadLettersProp={this.state.spreadLetters} /> }} />\r\n\r\n          <Route exact path=\"/projectSix/SavedBackronym\" render={() => { return <SavedBackronym /> }} />  \r\n          <Route  path=\"*\" render={() => { return <Footer />}} />\r\n        \r\n        </React.Fragment> \r\n  \r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}